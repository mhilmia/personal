) %>%
#Menghapus kolom bantu mean_val dan sd_val dari hasil akhir, lalu mengurutkan moda dari index mobilitas tertinggi ke terendah
select(-mean_val, -sd_val) %>%
arrange(desc(mean_index))
mobility_index_modes
#Mengelompokkan data berdasarkan provinsi dan menghitung rata-rata, standar deviasi, dan jumlah observasi dari setiap provinsi
data_pca %>%
group_by(provinces) %>%
summarise(
mean_index = mean(mobility_index, na.rm = TRUE),
sd_index = sd(mobility_index, na.rm = TRUE),
n = n()
)
#Mmbuat tabel frekuensi dua arah, dari class_province dan modes
tab_prov_mode <- classified_data %>%
tabyl(class_province, modes)
#Menghitung persentase moda dalam setiap baris, yaitu proporsi moda per kelas mobilitas provinsi
tab_prov_mode_percent <- tab_prov_mode %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1)
tab_prov_mode_percent
#Membuat data proporsi masing-masing moda dalam kelompok mobilitas provinsi untuk visualisasi
viz_data_mode <- classified_data %>%
group_by(class_province, modes) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(class_province) %>%
mutate(prop = count / sum(count))
#Membuat visualisasi stacked barplot
ggplot(viz_data_mode, aes(x = class_province, y = prop, fill = modes)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Distribusi Moda Perjalanan Berdasarkan Klasifikasi Mobilitas Provinsi",
x = "Klasifikasi Mobilitas Provinsi",
y = "Proporsi (%)",
fill = "Moda"
) +
theme_minimal()
#Membuat tabel silang yang menunjukkan jumlah observasi untuk setiap kombinasi
mode_table <- table(classified_data$class_province, classified_data$modes)
#Melakukan uji chi-square
chisq_test_mode_result <- chisq.test(mode_table)
#Melihat hasilnya
chisq_test_mode_result
#Menghasilkan residual standar dari tabel silang
std_residuals_mode <- chisq_test_mode_result$stdres
#Mengubah residual mejadi dataframe
res_df_mode <- as.data.frame(as.table(std_residuals_mode))
colnames(res_df_mode) <- c("Mobility_Class", "Mode", "Std_Residual")
#Membuat heatmap residual
#Biru = residual negatif (kurang dari ekspektasi); Putih = mendekati ekspektasi; Merah = residual positif (lebih dari ekspektasi)
ggplot(res_df_mode, aes(x = Mode, y = Mobility_Class, fill = Std_Residual)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Standardized Residuals (Moda x Kelas Provinsi)",
x = "Jenis Moda", y = "Kelas Provinsi") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis text
)
##Mmbuat tabel frekuensi dua arah, dari class_province dan motives
tab_prov_motives <- classified_data %>%
tabyl(class_province, motives)
#Menghitung persentase moda dalam setiap baris, yaitu proporsi motives per kelas mobilitas provinsi
tab_prov_motives_percent <- tab_prov_motives %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1)
tab_prov_motives_percent
#Membuat data proporsi masing-masing moda dalam kelompok mobilitas provinsi untuk visualisasi
viz_data_motives <- classified_data %>%
group_by(class_province, motives) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(class_province) %>%
mutate(prop = count / sum(count))
#Membuat visualisasi stacked barplot
ggplot(viz_data_motives, aes(x = class_province, y = prop, fill = motives)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Distribusi Alasan Perjalanan Berdasarkan Klasifikasi Mobilitas Provinsi",
x = "Klasifikasi Mobilitas Provinsi",
y = "Proporsi (%)",
fill = "Alasan"
) +
theme_minimal()
#Membuat tabel silang yang menunjukkan jumlah observasi untuk setiap kombinasi
motives_table <- table(classified_data$class_province, classified_data$motives)
#Melakukan uji chi-square
chisq_test_motives_result <- chisq.test(motives_table)
#Melihat hasilnya
chisq_test_motives_result
#Menghasilkan residual standar dari tabel silang
std_residuals_motives <- chisq_test_motives_result$stdres
#Mengubah residual mejadi dataframe
res_df_motives <- as.data.frame(as.table(std_residuals_motives))
colnames(res_df_motives) <- c("Mobility_Class", "Motives", "Std_Residual")
#Membuat heatmap residual
#Biru = residual negatif (kurang dari ekspektasi); Putih = mendekati ekspektasi; Merah = residual positif (lebih dari ekspektasi)
ggplot(res_df_motives, aes(x = Motives, y = Mobility_Class, fill = Std_Residual)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Standardized Residuals (Alasan x Kelas Provinsi)",
x = "Alasan", y = "Kelas Provinsi") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis text
)
#Menghitung rata-rata untuk trips, distance, dan duration per provinsi
data_province <- data_imputed %>%
group_by(provinces) %>%
summarise(
avg_trips_per_prov = mean(trips, na.rm = TRUE),
avg_distance_per_prov = mean(distance, na.rm = TRUE),
avg_duration_per_prov = mean(duration, na.rm = TRUE)
) %>%
ungroup()
data_province
#Menormalisasikan ketiga variabel mobilisasi dari setiap provinsi
data_province_norm <- data_province %>%
mutate(across(
c(avg_trips_per_prov, avg_distance_per_prov, avg_duration_per_prov),
~ as.numeric(scale(.))
))
data_province_norm
#Melakukan inisialisasi dan perulangan K-Means
n_clusters <- 10 #Menguji klaster sebanyak 10 agar efisien
wss <- numeric(n_clusters)
set.seed(15422140) #Menentukan seed agar hasil konsisten
for (i in 1:n_clusters) {
km.out <- kmeans(data_dist_mat, centers = i, nstart = 20)
wss[i] <- km.out$tot.withinss
}
#Membuat tabel dan scree plot
wss_df <- tibble(clusters = 1:n_clusters, wss = wss)
scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
geom_point(size = 4)+
geom_line() +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
xlab('Number of clusters')
#Menambahkan garis horizontal di setiap nilai WSS
scree_plot +
geom_hline(
yintercept = wss,
linetype = 'dashed',
col = c(rep('#000000',2),'#FF0000', rep('#000000', 7)) #Warna merah menandai "tekukan" atau jumlah klaster optimal
)
#Menjalankan clustering K-Means untuk membentuk 3 klaster
set.seed(15422140) #Menentukan seed agar hasil konsisten
km.out <- kmeans(data_dist_mat, centers = 3, nstart = 20)
km.out
#Menambahkan hasil klaster ke data provinsi yang sudah dinormalisasi
data_clusters_kmeans <- data_dist_mat
data_clusters_kmeans$Cluster <- km.out$cluster
data_clusters_kmeans
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
#Memperlihatkan karakteristik rata-rata, standar deviasi, dan median data normal dari setiap klaster
cluster_summary_kmeans <- data_clusters_kmeans %>%
group_by(Cluster) %>%
summarize_all(list(mean = mean, sd = sd, median = median))
cluster_summary_kmeans
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(mice)
library(readr)
library(ggplot2)
library(janitor)
#Membaca data
data_raw <- read_csv2("Data.csv") %>%
mutate(motives = recode(TravelMotives, #Mengubah motives dari kode menjadi kata
"T001080" = "All",
"2030170" = "Work",
"2030190" = "Services/care",
"2030200" = "Shopping",
"2030210" = "Attending education",
"2030220" = "Visits",
"2030230" = "Leisure, sports",
"2030240" = "Touring/walking",
"2030250" = "Other",
"2820740" = "Business trips"
),
modes = recode(TravelModes, #Mengubah moda dari kode menjadi kata
"T001093" = "All",
"A048583" = "Car (driver)",
"A048584" = "Car (passenger)",
"A018981" = "Train",
"A018982" = "Bus/tram/metro",
"A018984" = "Bike",
"A018985" = "Walking",
"A018986" = "Other"
),
provinces = recode(RegionCharacteristics, #Mengubah provinsi dari kode menjadi kata
"PV20" = "Groningen",
"PV21" = "FryslÃ¢n",
"PV22" = "Drenthe",
"PV23" = "Overijssel",
"PV24" = "Flevoland",
"PV25" = "Gelderland",
"PV26" = "Utrecht",
"PV27" = "Noord-Holland",
"PV28" = "Zuid-Holland",
"PV29" = "Zeeland",
"PV30" = "Noord-Brabant",
"PV31" = "Limburg"
),
year = recode(Periods, #Mengubah tahun dari kode menjadi kata
"2018JJ00" = 2018,
"2019JJ00" = 2019,
"2020JJ00" = 2020,
"2021JJ00" = 2021,
"2022JJ00" = 2022,
"2023JJ00" = 2023
)
) %>%
rename( #Mengubah nama kolom menjadi trips, distance, dan duration masing-masing
trips = Trips_1,
distance = DistanceTravelled_2,
duration = TimeTravelled_3
) %>%
mutate(across(c(trips, distance, duration), ~na_if(., "."))) %>% #Mengubah data yang "." menjadi NA
mutate(across(c(trips, distance, duration), as.numeric)) #Mengubah kolom menjadi tipe numerik
#Menentukan data yang berisikan trips, distance, duration, motives, modes, provinces, dan year dari data_raw
data <- data_raw[, c("trips", "distance", "duration","motives","modes","provinces","year")]
data
#Mengubah kolom motives, modes, provinces, dan year menjadi tipe data faktor (kategorikal) karena mice perlu mengetahui kolom yang berupa numerik dan kategorikal
data <- data %>%
mutate(across(c(motives, modes, provinces, year), as.factor))
#m = 5, melakukan imputasi sebanyak 5 kali; method = "pmm", menggunakan metode yang sering dipakai untuk imputasi; seed = 1542214, menentukan seed agar hasilnya bisa direproduksi
imputed <- mice(data, m = 5, method = 'pmm', seed = 15422140)
#Mengambil salah satu dari hasil imputasi yang sudah dibuat, yaitu hasil ke-1 dari 5 data imputasi yang dihasilkan
data_imputed <- complete(imputed, 1)
data_imputed
#Membuat dataset yang terdiri dari trips, distance, dan duration
numerical_data <- data_imputed %>%
select(trips, distance, duration)
#Menormalisasi data dalam kolom trips, distance, dan duration
numerical_data_normalized <- as.data.frame(scale(numerical_data))
numerical_data_normalized
pca_result <- prcomp(numerical_data_normalized, center = TRUE, scale. = TRUE)
#Menampilkan loadings dari setiap variabel terhadap principal components
pca_result$rotation
pca_scores <- as.data.frame(pca_result$x) #Mengubah hasil dari PCA jadi dataframe
#Menambahkan kolom ke data_imputed bernama mobility_index yang diambil dari PC1
data_pca <- data_imputed %>%
mutate(mobility_index = -1 * pca_scores$PC1) #-1 supaya nilai lebih intuitif
data_pca
mobility_index_province <- data_pca %>%
group_by(provinces) %>%
summarise(mean_index = mean(mobility_index, na.rm = TRUE)) %>% #Mengelompokkan data berdasarkan provinsi, lalu menghitung rata-rata indeks mobilitas di tiap provinsi
mutate(
#Menghitung rata-rata dan standar deviasi dari seluruh index mobilisasi sebagai dasar klasifikasi
mean_val = mean(mean_index),
sd_val = sd(mean_index),
#Mengklasifikasikan tingkat mobilitas per provinsi berdasarkan mean_val dan sd_val
mobility_class = case_when(
mean_index > mean_val + sd_val ~ "High",
mean_index < mean_val - sd_val ~ "Low",
TRUE ~ "Medium"
)
) %>%
#Menghapus kolom bantu mean_val dan sd_val dari hasil akhir, lalu mengurutkan provinsi dari index mobilitas tertinggi ke terendah
select(-mean_val, -sd_val) %>%
arrange(desc(mean_index))
mobility_index_province
mobility_index_motives <- data_pca %>%
group_by(motives) %>%
summarise(mean_index = mean(mobility_index, na.rm = TRUE)) %>% #Mengelompokkan data berdasarkan motives, lalu menghitung rata-rata indeks mobilitas di tiap motives
mutate(
#Menghitung rata-rata dan standar deviasi dari seluruh index mobilisasi sebagai dasar klasifikasi
mean_val = mean(mean_index),
sd_val = sd(mean_index),
#Mengklasifikasikan tingkat mobilitas per motives berdasarkan mean_val dan sd_val
mobility_class = case_when(
mean_index > mean_val + sd_val ~ "High",
mean_index < mean_val - sd_val ~ "Low",
TRUE ~ "Medium"
)
) %>%
#Menghapus kolom bantu mean_val dan sd_val dari hasil akhir, lalu mengurutkan motives dari index mobilitas tertinggi ke terendah
select(-mean_val, -sd_val) %>%
arrange(desc(mean_index))
mobility_index_motives
mobility_index_modes <- data_pca %>%
group_by(modes) %>%
summarise(mean_index = mean(mobility_index, na.rm = TRUE)) %>% #Mengelompokkan data berdasarkan moda, lalu menghitung rata-rata indeks mobilitas di tiap moda
mutate(
#Menghitung rata-rata dan standar deviasi dari seluruh index mobilisasi sebagai dasar klasifikasi
mean_val = mean(mean_index),
sd_val = sd(mean_index),
#Mengklasifikasikan tingkat mobilitas per moda berdasarkan mean_val dan sd_val
mobility_class = case_when(
mean_index > mean_val + sd_val ~ "High",
mean_index < mean_val - sd_val ~ "Low",
TRUE ~ "Medium"
)
) %>%
#Menghapus kolom bantu mean_val dan sd_val dari hasil akhir, lalu mengurutkan moda dari index mobilitas tertinggi ke terendah
select(-mean_val, -sd_val) %>%
arrange(desc(mean_index))
mobility_index_modes
#Mengelompokkan data berdasarkan provinsi dan menghitung rata-rata, standar deviasi, dan jumlah observasi dari setiap provinsi
data_pca %>%
group_by(provinces) %>%
summarise(
mean_index = mean(mobility_index, na.rm = TRUE),
sd_index = sd(mobility_index, na.rm = TRUE),
n = n()
)
#Mmbuat tabel frekuensi dua arah, dari class_province dan modes
tab_prov_mode <- classified_data %>%
tabyl(class_province, modes)
#Menghitung persentase moda dalam setiap baris, yaitu proporsi moda per kelas mobilitas provinsi
tab_prov_mode_percent <- tab_prov_mode %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1)
tab_prov_mode_percent
#Membuat data proporsi masing-masing moda dalam kelompok mobilitas provinsi untuk visualisasi
viz_data_mode <- classified_data %>%
group_by(class_province, modes) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(class_province) %>%
mutate(prop = count / sum(count))
#Membuat visualisasi stacked barplot
ggplot(viz_data_mode, aes(x = class_province, y = prop, fill = modes)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Distribusi Moda Perjalanan Berdasarkan Klasifikasi Mobilitas Provinsi",
x = "Klasifikasi Mobilitas Provinsi",
y = "Proporsi (%)",
fill = "Moda"
) +
theme_minimal()
#Membuat tabel silang yang menunjukkan jumlah observasi untuk setiap kombinasi
mode_table <- table(classified_data$class_province, classified_data$modes)
#Melakukan uji chi-square
chisq_test_mode_result <- chisq.test(mode_table)
#Melihat hasilnya
chisq_test_mode_result
#Menghasilkan residual standar dari tabel silang
std_residuals_mode <- chisq_test_mode_result$stdres
#Mengubah residual mejadi dataframe
res_df_mode <- as.data.frame(as.table(std_residuals_mode))
colnames(res_df_mode) <- c("Mobility_Class", "Mode", "Std_Residual")
#Membuat heatmap residual
#Biru = residual negatif (kurang dari ekspektasi); Putih = mendekati ekspektasi; Merah = residual positif (lebih dari ekspektasi)
ggplot(res_df_mode, aes(x = Mode, y = Mobility_Class, fill = Std_Residual)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Standardized Residuals (Moda x Kelas Provinsi)",
x = "Jenis Moda", y = "Kelas Provinsi") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis text
)
##Mmbuat tabel frekuensi dua arah, dari class_province dan motives
tab_prov_motives <- classified_data %>%
tabyl(class_province, motives)
#Menghitung persentase moda dalam setiap baris, yaitu proporsi motives per kelas mobilitas provinsi
tab_prov_motives_percent <- tab_prov_motives %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1)
tab_prov_motives_percent
#Membuat data proporsi masing-masing moda dalam kelompok mobilitas provinsi untuk visualisasi
viz_data_motives <- classified_data %>%
group_by(class_province, motives) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(class_province) %>%
mutate(prop = count / sum(count))
#Membuat visualisasi stacked barplot
ggplot(viz_data_motives, aes(x = class_province, y = prop, fill = motives)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Distribusi Alasan Perjalanan Berdasarkan Klasifikasi Mobilitas Provinsi",
x = "Klasifikasi Mobilitas Provinsi",
y = "Proporsi (%)",
fill = "Alasan"
) +
theme_minimal()
#Membuat tabel silang yang menunjukkan jumlah observasi untuk setiap kombinasi
motives_table <- table(classified_data$class_province, classified_data$motives)
#Melakukan uji chi-square
chisq_test_motives_result <- chisq.test(motives_table)
#Melihat hasilnya
chisq_test_motives_result
#Menghasilkan residual standar dari tabel silang
std_residuals_motives <- chisq_test_motives_result$stdres
#Mengubah residual mejadi dataframe
res_df_motives <- as.data.frame(as.table(std_residuals_motives))
colnames(res_df_motives) <- c("Mobility_Class", "Motives", "Std_Residual")
#Membuat heatmap residual
#Biru = residual negatif (kurang dari ekspektasi); Putih = mendekati ekspektasi; Merah = residual positif (lebih dari ekspektasi)
ggplot(res_df_motives, aes(x = Motives, y = Mobility_Class, fill = Std_Residual)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Standardized Residuals (Alasan x Kelas Provinsi)",
x = "Alasan", y = "Kelas Provinsi") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis text
)
#Menghitung rata-rata untuk trips, distance, dan duration per provinsi
data_province <- data_imputed %>%
group_by(provinces) %>%
summarise(
avg_trips_per_prov = mean(trips, na.rm = TRUE),
avg_distance_per_prov = mean(distance, na.rm = TRUE),
avg_duration_per_prov = mean(duration, na.rm = TRUE)
) %>%
ungroup()
data_province
#Menormalisasikan ketiga variabel mobilisasi dari setiap provinsi
data_province_norm <- data_province %>%
mutate(across(
c(avg_trips_per_prov, avg_distance_per_prov, avg_duration_per_prov),
~ as.numeric(scale(.))
))
data_province_norm
#Melakukan inisialisasi dan perulangan K-Means
n_clusters <- 10 #Menguji klaster sebanyak 10 agar efisien
wss <- numeric(n_clusters)
set.seed(15422140) #Menentukan seed agar hasil konsisten
for (i in 1:n_clusters) {
km.out <- kmeans(data_dist_mat, centers = i, nstart = 20)
wss[i] <- km.out$tot.withinss
}
#Membuat tabel dan scree plot
wss_df <- tibble(clusters = 1:n_clusters, wss = wss)
scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
geom_point(size = 4)+
geom_line() +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10)) +
xlab('Number of clusters')
#Menambahkan garis horizontal di setiap nilai WSS
scree_plot +
geom_hline(
yintercept = wss,
linetype = 'dashed',
col = c(rep('#000000',2),'#FF0000', rep('#000000', 7)) #Warna merah menandai "tekukan" atau jumlah klaster optimal
)
#Menjalankan clustering K-Means untuk membentuk 3 klaster
set.seed(15422140) #Menentukan seed agar hasil konsisten
km.out <- kmeans(data_dist_mat, centers = 3, nstart = 20)
km.out
#Menambahkan hasil klaster ke data provinsi yang sudah dinormalisasi
data_clusters_kmeans <- data_dist_mat
data_clusters_kmeans$Cluster <- km.out$cluster
data_clusters_kmeans
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
#Menambahkan hasil klaster ke data provinsi yang sudah dinormalisasi
data_clusters_kmeans <- data_dist_mat
data_clusters_kmeans$Cluster <- km.out$cluster
data_clusters_kmeans
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
`{r}
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
#Memperlihatkan karakteristik rata-rata, standar deviasi, dan median data normal dari setiap klaster
cluster_summary_kmeans <- data_clusters_kmeans %>%
group_by(Cluster) %>%
summarize_all(list(mean = mean, sd = sd, median = median))
cluster_summary_kmeans
#Menampilkan provinsi-provinsi yang termasuk ke dalam masing-masing klaster
cluster_provinces <- rownames(data_clusters_kmeans)
for(k in unique(data_clusters_kmeans$Cluster)) {
cat(paste("Klaster", k, ": \n"))
cat(paste(cluster_provinces[data_clusters_kmeans$Cluster == k], collapse = ", "), "\n\n")
}
#Memperlihatkan karakteristik rata-rata, standar deviasi, dan median data normal dari setiap klaster
cluster_summary_kmeans <- data_clusters_kmeans %>%
group_by(Cluster) %>%
summarize_all(list(mean = mean, sd = sd, median = median))
cluster_summary_kmeans
knit_with_parameters("~/Kuliah/Dokumen Asprak SEMOGA LULUS/Open Project/Markdown.Rmd")
